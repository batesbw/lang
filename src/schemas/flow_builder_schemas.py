from typing import Optional
from pydantic import BaseModel, Field

class FlowBuildRequest(BaseModel):
    """
    Defines the input for requesting a basic Salesforce Flow creation.
    For initial implementation, this will generate a simple screen flow
    with one screen and a display text component.
    """
    flow_api_name: str = Field(..., description="API name for the Flow, e.g., MySimpleScreenFlow_AutoGen", example="MySimpleScreenFlow_AutoGen")
    flow_label: str = Field(..., description="Label for the Flow, e.g., My Simple Screen Flow AutoGen", example="My Simple Screen Flow AutoGen")
    flow_description: Optional[str] = Field(None, description="Optional description for the Flow.", example="A simple screen flow generated by the agent.")
    
    screen_api_name: str = Field(..., description="API name for the screen element.", example="Screen1")
    screen_label: str = Field(..., description="Label for the screen element.", example="WelcomeScreen")
    
    display_text_api_name: str = Field(..., description="API name for the display text component on the screen.", example="WelcomeText")
    display_text_content: str = Field(..., description="The content of the display text component.", example="Hello from your automatically generated Flow!")
    
    target_api_version: str = Field(default="59.0", description="Salesforce API version for the Flow metadata.", example="59.0")

class FlowBuildResponse(BaseModel):
    """
    Defines the output after a Flow build attempt.
    """
    success: bool
    input_request: FlowBuildRequest # Echo back the request for clarity and context
    flow_xml: Optional[str] = Field(None, description="The generated Flow XML string if successful.")
    error_message: Optional[str] = Field(None, description="Error message if Flow building failed.") 